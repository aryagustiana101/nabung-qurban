generator client {
  provider            = "prisma-client"
  output              = "../generated/prisma"
  moduleFormat        = "esm"
  importFileExtension = ""
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserStatus {
  active
  inactive

  @@map("user_statuses")
}

enum UserType {
  internal
  external

  @@map("user_types")
}

model User {
  id          Int        @id @default(autoincrement())
  name        String
  phoneNumber String     @map("phone_number")
  email       String?
  status      UserStatus @default(active)
  type        UserType   @default(external)
  username    String     @unique
  password    String
  image       String?    @db.LongText
  verifiedAt  DateTime?  @map("verified_at")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  userAccounts              UserAccount[]
  userTokens                UserToken[]
  userLogs                  UserLog[]
  userOtpCodes              UserOtpCode[]
  userPasswordResetSessions UserPasswordResetSession[]
  userAddresses             UserAddress[]

  @@map("users")
}

enum UserAccountType {
  shohibul_qurban
  pejuang_qurban
  antar_qurban

  @@map("user_account_types")
}

model UserAccount {
  id        Int             @id @default(autoincrement())
  userId    Int             @map("user_id")
  type      UserAccountType @default(shohibul_qurban)
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([userId])
  @@map("user_accounts")
}

enum TokenStatus {
  active
  inactive

  @@map("token_statuses")
}

model Token {
  id        Int         @id @default(autoincrement())
  key       String      @unique
  status    TokenStatus @default(active)
  secret    String      @db.LongText
  abilities Json
  expiredAt DateTime?   @map("expired_at")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  userToken UserToken?

  @@map("tokens")
}

model UserToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  tokenId   Int      @unique @map("token_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  token Token @relation(fields: [tokenId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([tokenId])
  @@index([userId])
  @@map("user_tokens")
}

enum UserLogAction {
  login
  logout
  register
  forgot_password
  change_password

  @@map("user_log_actions")
}

model UserLog {
  id        Int           @id @default(autoincrement())
  userId    Int           @map("user_id")
  action    UserLogAction
  remark    String?
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([userId])
  @@map("user_logs")
}

enum OtpCodeAction {
  login
  register
  forgot_password

  @@map("otp_code_actions")
}

enum OtpCodeStatus {
  used
  unused

  @@map("otp_code_statuses")
}

model OtpCode {
  id        Int           @id @default(autoincrement())
  key       String        @unique
  action    OtpCodeAction
  status    OtpCodeStatus @default(unused)
  secret    String
  expiredAt DateTime      @map("expired_at")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  userOtpCode UserOtpCode?

  @@map("otp_codes")
}

model UserOtpCode {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  otpCodeId Int      @unique @map("otp_code_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  otpCode OtpCode @relation(fields: [otpCodeId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([otpCodeId])
  @@index([userId])
  @@map("user_otp_codes")
}

enum UserPasswordResetSessionStatus {
  active
  inactive

  @@map("user_password_reset_session_statuses")
}

enum UserPasswordResetSessionAction {
  forgot_password

  @@map("user_password_reset_session_actions")
}

model UserPasswordResetSession {
  id        Int                            @id @default(autoincrement())
  userId    Int                            @map("user_id")
  key       String                         @unique
  action    UserPasswordResetSessionAction
  status    UserPasswordResetSessionStatus @default(active)
  expiredAt DateTime                       @map("expired_at")
  createdAt DateTime                       @default(now()) @map("created_at")
  updatedAt DateTime                       @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([userId])
  @@map("user_password_reset_sessions")
}

enum UserAddressType {
  main
  alternative

  @@map("user_address_types")
}

model UserAddress {
  id                 Int             @id @default(autoincrement())
  userId             Int             @map("user_id")
  name               String
  type               UserAddressType
  contactName        String          @map("contact_name")
  contactPhoneNumber String          @map("contact_phone_number")
  location           Json
  detail             String          @db.LongText
  note               String?         @db.LongText
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([userId])
  @@map("user_addresses")
}

enum ServiceStatus {
  active
  inactive

  @@map("service_statuses")
}

enum ServiceLevel {
  main
  alternative

  @@map("service_levels")
}

model Service {
  id          Int           @id @default(autoincrement())
  code        String        @unique
  name        String
  status      ServiceStatus
  level       ServiceLevel
  description String?       @db.LongText
  image       String        @db.LongText
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  productServices ProductService[]

  @@map("services")
}

enum ProductStatus {
  draft
  published
  archived

  @@map("product_statuses")
}

model Product {
  id         Int           @id @default(autoincrement())
  name       String
  status     ProductStatus
  thumbnail  String        @db.LongText
  images     Json
  attributes Json
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")

  productServices        ProductService[]
  productVariants        ProductVariant[]
  productCategoryEntries ProductCategoryEntry[]

  @@map("products")
}

model ProductService {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  serviceId Int      @map("service_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([productId])
  @@index([serviceId])
  @@map("product_services")
}

model ProductCategory {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  productCategoryEntries ProductCategoryEntry[]

  @@map("product_categories")
}

model ProductCategoryEntry {
  id                Int      @id @default(autoincrement())
  productCategoryId Int      @map("product_category_id")
  productId         Int      @map("product_id")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  product         Product         @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productCategory ProductCategory @relation(fields: [productCategoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([productId])
  @@index([productCategoryId])
  @@map("product_category_entries")
}

enum ProductVariantStatus {
  active
  inactive

  @@map("product_variant_statuses")
}

model ProductVariant {
  id        Int                  @id @default(autoincrement())
  productId Int                  @map("product_id")
  name      String
  status    ProductVariantStatus
  price     Int
  sku       String?
  stock     Int?
  weight    Int?
  location  String?
  createdAt DateTime             @default(now()) @map("created_at")
  updatedAt DateTime             @updatedAt @map("updated_at")

  product                        Product                        @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productVariantAttributeEntries ProductVariantAttributeEntry[]
  productVariantDiscounts        ProductVariantDiscount[]

  @@index([productId])
  @@map("product_variants")
}

model ProductVariantAttribute {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  name      String
  rule      Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  productVariantAttributeEntries ProductVariantAttributeEntry[]

  @@map("product_variant_attributes")
}

model ProductVariantAttributeEntry {
  id                        Int      @id @default(autoincrement())
  productVariantAttributeId Int      @map("product_variant_attribute_id")
  productVariantId          Int      @map("product_variant_id")
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")

  productVariant          ProductVariant          @relation(fields: [productVariantId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productVariantAttribute ProductVariantAttribute @relation(fields: [productVariantAttributeId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([productVariantId])
  @@index([productVariantAttributeId])
  @@map("product_variant_attribute_entries")
}

enum DiscountLevel {
  product_variant

  @@map("discount_levels")
}

enum DiscountType {
  flat
  percentage

  @@map("discount_types")
}

model Discount {
  id        Int           @id @default(autoincrement())
  name      String
  level     DiscountLevel
  type      DiscountType
  value     Int
  rule      Json
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  productVariantDiscounts ProductVariantDiscount[]

  @@map("discounts")
}

model ProductVariantDiscount {
  id               Int      @id @default(autoincrement())
  productVariantId Int      @map("product_variant_id")
  discountId       Int      @map("discount_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  productVariant ProductVariant @relation(fields: [productVariantId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  discount       Discount       @relation(fields: [discountId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([productVariantId])
  @@index([discountId])
  @@map("product_variant_discounts")
}
