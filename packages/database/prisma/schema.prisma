generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserStatus {
  active
  inactive

  @@map("user_statuses")
}

enum UserType {
  internal
  external

  @@map("user_types")
}

model User {
  id          Int        @id @default(autoincrement())
  name        String
  phoneNumber String     @map("phone_number")
  email       String?
  status      UserStatus @default(active)
  type        UserType   @default(external)
  username    String     @unique
  password    String
  image       String?    @db.LongText
  verifiedAt  DateTime?  @map("verified_at")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  userAccounts              UserAccount[]
  userTokens                UserToken[]
  userLogs                  UserLog[]
  userOtpCodes              UserOtpCode[]
  userPasswordResetSessions UserPasswordResetSession[]

  @@map("users")
}

enum UserAccountType {
  shohibul_qurban
  pejuang_qurban
  antar_qurban

  @@map("user_account_types")
}

model UserAccount {
  id        Int             @id @default(autoincrement())
  userId    Int             @map("user_id")
  type      UserAccountType @default(shohibul_qurban)
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([userId])
  @@map("user_accounts")
}

enum TokenStatus {
  active
  inactive

  @@map("token_statuses")
}

model Token {
  id        Int         @id @default(autoincrement())
  key       String      @unique
  status    TokenStatus @default(active)
  secret    String      @db.LongText
  abilities Json
  expiredAt DateTime?   @map("expired_at")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  userToken UserToken?

  @@map("tokens")
}

model UserToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  tokenId   Int      @unique @map("token_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  token Token @relation(fields: [tokenId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([tokenId])
  @@index([userId])
  @@map("user_tokens")
}

enum UserLogAction {
  login
  logout
  register
  forgot_password
  change_password

  @@map("user_log_actions")
}

model UserLog {
  id        Int           @id @default(autoincrement())
  userId    Int           @map("user_id")
  action    UserLogAction
  remark    String?
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([userId])
  @@map("user_logs")
}

enum OtpCodeAction {
  login
  register
  forgot_password

  @@map("otp_code_actions")
}

enum OtpCodeStatus {
  used
  unused

  @@map("otp_code_statuses")
}

model OtpCode {
  id        Int           @id @default(autoincrement())
  key       String        @unique
  action    OtpCodeAction
  status    OtpCodeStatus @default(unused)
  secret    String
  expiredAt DateTime      @map("expired_at")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  userOtpCode UserOtpCode?

  @@map("otp_codes")
}

model UserOtpCode {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  otpCodeId Int      @unique @map("otp_code_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  otpCode OtpCode @relation(fields: [otpCodeId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([otpCodeId])
  @@index([userId])
  @@map("user_otp_codes")
}

enum UserPasswordResetSessionStatus {
  active
  inactive

  @@map("user_password_reset_session_statuses")
}

enum UserPasswordResetSessionAction {
  forgot_password

  @@map("user_password_reset_session_actions")
}

model UserPasswordResetSession {
  id        Int                            @id @default(autoincrement())
  userId    Int                            @map("user_id")
  key       String                         @unique
  action    UserPasswordResetSessionAction
  status    UserPasswordResetSessionStatus @default(active)
  expiredAt DateTime                       @map("expired_at")
  createdAt DateTime                       @default(now()) @map("created_at")
  updatedAt DateTime                       @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([userId])
  @@map("user_password_reset_sessions")
}
